import { Button } from "@/components/ui/button"
import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { closeSheet } from "@/redux/slices/cartSlice"
import type { RootState } from "@/redux/store/store"
import { useDispatch, useSelector } from "react-redux"
import { useState, useEffect } from "react"
import { Trash2, Plus, Minus, ShoppingBag } from "lucide-react"

// Define the product type based on your data structure
interface ProductName {
  en: string;
  fr: string;
  ar: string;
}

interface ColorName {
  en: string;
  fr: string;
  ar: string;
}

interface CartProduct {
  name: ProductName;
  productId: string;
  colorCode: string;
  colorName: ColorName;
  detailId: string;
  price: number;
  quantity: number;
  size: string;
  image?: string; // Optional image URL
}

function SheetCart() {
  const dispatch = useDispatch()
  const isOpen = useSelector((state: RootState) => state.cart.openSheet);
  const [cartProducts, setCartProducts] = useState<CartProduct[]>([]);
  const [language, setLanguage] = useState<'en' | 'fr' | 'ar'>('en');

  // Load cart products from localStorage
  useEffect(() => {
    const loadCartFromStorage = () => {
      try {
        const storedCart = localStorage.getItem('cartProducts');
        if (storedCart) {
          const parsedCart = JSON.parse(storedCart);
          setCartProducts(parsedCart);
        }
      } catch (error) {
        console.error('Error loading cart from localStorage:', error);
      }
    };

    if (isOpen) {
      loadCartFromStorage();
    }
  }, [isOpen]);

  // Update quantity function
  const updateQuantity = (detailId: string, newQuantity: number) => {
    if (newQuantity <= 0) {
      removeProduct(detailId);
      return;
    }

    const updatedCart = cartProducts.map(product =>
      product.detailId === detailId
        ? { ...product, quantity: newQuantity }
        : product
    );
    
    setCartProducts(updatedCart);
    localStorage.setItem('cartProducts', JSON.stringify(updatedCart));
  };

  // Remove product function
  const removeProduct = (detailId: string) => {
    const updatedCart = cartProducts.filter(product => product.detailId !== detailId);
    setCartProducts(updatedCart);
    localStorage.setItem('cartProducts', JSON.stringify(updatedCart));
  };

  // Calculate total
  const totalPrice = cartProducts.reduce((total, product) => {
    return total + (product.price * product.quantity);
  }, 0);

  const totalItems = cartProducts.reduce((total, product) => total + product.quantity, 0);

  // Get localized text
  const getLocalizedText = (textObj: ProductName | ColorName) => {
    return textObj[language] || textObj.en;
  };

  return (
    <Sheet open={isOpen} onOpenChange={() => { dispatch(closeSheet()) }}>
      <SheetContent className="w-full sm:max-w-md flex flex-col h-full p-0">
        {/* Header */}
        <SheetHeader className="px-6 py-6 border-b bg-white sticky top-0 z-10">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-black rounded-lg">
                <ShoppingBag className="w-5 h-5 text-white" />
              </div>
              <div>
                <SheetTitle className="text-xl font-semibold">Shopping Cart</SheetTitle>
                <p className="text-sm text-gray-500">{totalItems} items</p>
              </div>
            </div>
            
            {/* Language Toggle */}
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value as 'en' | 'fr' | 'ar')}
              className="text-xs border rounded-md px-2 py-1 bg-gray-50"
            >
              <option value="en">EN</option>
              <option value="fr">FR</option>
              <option value="ar">AR</option>
            </select>
          </div>
        </SheetHeader>

        {/* Cart Items */}
        <div className="flex-1 overflow-y-auto">
          {cartProducts.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full px-6 text-center">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <ShoppingBag className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
              <p className="text-gray-500 text-sm">Start shopping to add items to your cart</p>
            </div>
          ) : (
            <div className="px-6 py-4 space-y-4">
              {cartProducts.map((product) => (
                <div key={product.detailId} className="bg-white rounded-xl border border-gray-200 p-4 hover:shadow-md transition-shadow">
                  <div className="flex gap-4">
                    {/* Product Image */}
                    <div className="relative flex-shrink-0">
                      <div className="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg overflow-hidden">
                        {product.image ? (
                          <img
                            src={product.image}
                            alt={getLocalizedText(product.name)}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.style.display = 'none';
                            }}
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <ShoppingBag className="w-8 h-8 text-gray-400" />
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Product Details */}
                    <div className="flex-1 min-w-0">
                      <h3 className="font-medium text-gray-900 truncate mb-1">
                        {getLocalizedText(product.name)}
                      </h3>
                      
                      <div className="space-y-1 mb-3">
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                          <div
                            className="w-3 h-3 rounded-full ring-2 ring-white shadow-sm"
                            style={{ backgroundColor: product.colorCode }}
                          />
                          <span className="truncate">{getLocalizedText(product.colorName)}</span>
                        </div>
                        <p className="text-sm text-gray-600">Size: {product.size}</p>
                      </div>

                      {/* Price and Controls */}
                      <div className="flex items-center justify-between">
                        <div className="text-lg font-semibold text-gray-900">
                          ${product.price}
                        </div>
                        
                        <div className="flex items-center gap-2">
                          {/* Quantity Controls */}
                          <div className="flex items-center bg-gray-50 rounded-lg">
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0 hover:bg-gray-200"
                              onClick={() => updateQuantity(product.detailId, product.quantity - 1)}
                            >
                              <Minus className="w-3 h-3" />
                            </Button>
                            <span className="w-8 text-center text-sm font-medium">
                              {product.quantity}
                            </span>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0 hover:bg-gray-200"
                              onClick={() => updateQuantity(product.detailId, product.quantity + 1)}
                            >
                              <Plus className="w-3 h-3" />
                            </Button>
                          </div>

                          {/* Remove Button */}
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 text-gray-400 hover:text-red-500 hover:bg-red-50"
                            onClick={() => removeProduct(product.detailId)}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>

                      {/* Subtotal */}
                      {product.quantity > 1 && (
                        <div className="mt-2 text-right">
                          <span className="text-sm text-gray-500">
                            Subtotal: <span className="font-medium text-gray-900">
                              ${(product.price * product.quantity).toFixed(2)}
                            </span>
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        {cartProducts.length > 0 && (
          <div className="border-t bg-white px-6 py-6 space-y-4">
            {/* Total */}
            <div className="flex justify-between items-center text-lg">
              <span className="font-medium text-gray-900">Total</span>
              <span className="font-bold text-gray-900">${totalPrice.toFixed(2)}</span>
            </div>
            
            {/* Actions */}
            <div className="space-y-3">
              <Button className="w-full bg-black hover:bg-gray-800 text-white font-medium py-3 rounded-lg">
                Checkout • ${totalPrice.toFixed(2)}
              </Button>
              <SheetClose asChild>
                <Button variant="outline" className="w-full py-3 rounded-lg">
                  Continue Shopping
                </Button>
              </SheetClose>
            </div>
          </div>
        )}

        {/* Empty Cart Footer */}
        {cartProducts.length === 0 && (
          <div className="px-6 py-6 border-t">
            <SheetClose asChild>
              <Button className="w-full bg-black hover:bg-gray-800 text-white py-3 rounded-lg">
                Start Shopping
              </Button>
            </SheetClose>
          </div>
        )}
      </SheetContent>
    </Sheet>
  )
}

export default SheetCart